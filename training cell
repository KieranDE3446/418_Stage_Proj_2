#This cell block contains the train_func() function. It's purpose is to use the training data set
#to train the machine learning algorithm

#it is passed the path of the training images from the parameter 'img_path'. The parameter 'size'
#is the size that the image will be cropped to (mxm)

def train_func(img_path, size):
    correct = 0                                                 #initialize 'correct' variable as 0
    rot = 0
    theta = 90
    sum_edg = np.empty(theta)
    file_names = os.listdir(img_path)                           #makes list of all image file names          
    x = np.empty((len(file_names), size))                    #create list to store image arrays
    y = np.empty(len(file_names))                               #create list to store image classes
    y_pred = np.empty(len(file_names))
    
    for file in range(len(file_names)):                         #for loop for any number of files in path
        
        if ('cir') in file_names[file]:                         #checks if string 'circ' is in the file name
            y[file] = 0                                         #assigns class 0 if image is circle
        if ('rec') in file_names[file]:                         #checks if string 'rec' is in the file name
            y[file] = 1                                         #assigns class 1 if image is circle
        if ('squ') in file_names[file]:                         #checks if string 'squ' is in the file name
            y[file] = 2                                         #assigns class 2 if image is circle

        try:                                                    #tries to open file, throws error if needed
            img = Image.open(img_path + '/' + file_names[file], mode='r')   #if error caught, goes to exception
            filter = ImageEnhance.Contrast(img)
            img = filter.enhance(1)
            cont = ImageEnhance.Sharpness(img)
            img = cont.enhance(1)
            img_gray = img.convert('L')                         #convert image to grayscale 
            #print("Image " +(file) + " converted")-------------Print if successful for testing
            width, height = img_gray.size                       #sets 'width' and 'height' variables to size of original image
            side = min(width, height)                           #sets 'side' variable to smaller value (between width and height) of image
                                       #resizes image to specified size in main function
            
            img = img_gray.crop((width/2-side/2, height/2-side/2, width/2+side/2, height/2+side/2))
            img = img.resize((size,size))  
            #img.show()-----------------------------------------Display image for testing
            #im_array = asarray(img)                             #saves the image data as array of vectorized grayscale data points
            #print(file_names[file]) ---------------------------Display filename for testing
            
            
            
            data = np.array(img)    #data is the array of resized greyscale pixles for the image
            edges = feature.canny(data, sigma = 1) #array of bool values detected edges (true/false)
            image = Image.fromarray(edges) # converts edges array into image of black and white from edges
            new_coords = np.argwhere(image) # coordinates of white pixels (edges)
            orientation = np.arctan2(new_coords[:, 1], new_coords[:, 0]) #value of angle where 
            max_val_2 = orientation.mean()  #uses mean to find vertical orientation angle 
            if file == 12 or file == 33 or file == 56:
                image.show()



            rot_img_2 = image.rotate(max_val_2)         #ROTATe image to align object vertically 
            if file == 12 or file == 33 or file == 56:
                rot_img_2.show()



            edge_coords = np.argwhere(rot_img_2) 
            center = edge_coords.mean(axis=0)
            #print(center)
            coord_x = center[0]
            coord_y = center[1]
            im_cropped = rot_img_2.crop((coord_x - size/2, coord_y - size/2, coord_x + size/2, coord_y + size/2))
            image = im_cropped.resize((size,size))
            

            
            rot_img_arr_2 = np.array(image) 
            if file == 12 or file == 33 or file == 56:
                image.show()




            sum_edg_2 = np.count_nonzero(rot_img_arr_2 == 1, axis = 0)
            print(sum_edg_2)
            for k in range(size):
                if sum_edg_2[k] < 10:
                    sum_edg_2[k] = 0
            max_edge = max(sum_edg_2)
            while sum_edg_2[0] <max_edge:
                sum_edg_2 = rotate(sum_edg_2, -1)
            print(sum_edg_2)
            x[file,:] = sum_edg_2
           
            #print(len(sum_edg_2))
            img_arr = asarray(img)

            #x[file,:] = im_array.reshape(1,-1)                  #saves array data into x (input) variable
            #print(y[file])-------------------------------------Display y (output) list for testing
            #print(x[file,:])
        except IOError:
            print(file + "Does not exist in your directory")   
    #print(x)    
    lr = linear_model.LogisticRegression(max_iter=1000)                #creates linear model of data using logistic regression
    lr.fit(x,y)                                                        #fits data
    y_pred = lr.predict(x)                                             #appends predicted class value to the y_pred array
    #print(y_pred)--------------------------------------print predicted class (for testing)
    
    print("Model successfully trained!")                               #to inform user the program has been trained
    print("Training Data Confusion Matrix: ")                          
    print(confusion_matrix(y, y_pred))                                 #prints confusion matrix of training data
    print("Training Data Accuracy Score: ")
    accuracy = accuracy_score(y, y_pred)                
    print(accuracy * 100, "%")                                         #prints accuracy score of training data as percentage
    return lr
